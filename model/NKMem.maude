fmod RENAMED-INT is
    protecting INT *    ( sort Zero to MachineZero
                        , sort NzNat to MachineNzNat
                        , sort Nat to MachineNat
                        , sort NzInt to MachineNzInt
                        , sort Int to MachineInt
                        , op s_ : Nat -> NzNat to $succ_ .
                        , op sd_ : Nat Nat -> Nat to $sd_ .
                        , op -_ : Int -> Int to $neg_ .
                        , op _+_ : Int Int -> Int to $add__ .
                        , op _-_ : Int Int -> Int to $sub__ .
                        , op _*_ : Int Int -> Int to $mult__ .
                        , op _quo_ : Int NzInt -> Int to $quo__ .
                        , op _rem_ : Int NzInt -> Int to $rem__ .
                        , op _^_ : Int Nat -> Int to $pow__ .
                        , op abs : NzInt -> NzNat to $abs_ .
                        , op gcd__ : NzInt Int -> NzNat to $gcd__ .
                        , op lcm : NzInt NzInt -> NzNat to $lcm__ .
                        , op min : NzInt NzInt -> NzInt to $min__ .
                        , op max : NzInt NzInt -> NzInt to $max__ .
                        , op _xor_ : Int Int -> Int to $xor__ .
                        , op _>>_ : Int Int -> Int to $shr__ .
                        , op _<<_ : Int Int -> Int to $shl__ .
                        , op _divides_ : NzInt Int -> Bool to $divides__ .
                        ) .
endfm

fth BIT-WIDTH is
    protecting RENAMED-INT .
    op $nrBits : -> MachineNzNat .
    var N : MachineNzNat .
    eq ($divides 2 $nrBits) = true [nonexec] .
    ceq ($divides 2 N) = true
        if ($divides N $nrBits) /\ (N > 1) [nonexec] .
endfth

view 64-BIT from BIT-WIDTH to RENAMED-INT is
    op $nrBits to term 64 .
endv
